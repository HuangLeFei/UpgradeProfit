specVersion: "1.0.0"

name: "UpgradeProfit"
version: "0.0.1"
runner:
  node:
    name: "@subql/node-ethereum"
    version: "*"
  query:
    name: "@subql/query"
    version: "*"
description: "USDT升级分润合约 [UpgradeProfit]"
repository: "https://github.com/subquery/ethereum-subql-starter"

schema:
  file: "./schema.graphql"

network:
  # chainId is the EVM Chain ID, for BSC this is 56
  # https://chainlist.org/chain/56
  chainId: "56"
  # This endpoint must be a public non-pruned archive node
  # We recommend providing more than one endpoint for improved reliability, performance, and uptime
  # Public nodes may be rate limited, which can affect indexing speed
  # When developing your project we suggest getting a private API key
  # You can get them from OnFinality for free https://app.onfinality.io
  # https://documentation.onfinality.io/support/the-enhanced-api-service
  endpoint:
    - https://bsc-dataseed1.binance.org
    # - https://bsc-dataseed.binance.org
  # Recommended to provide the HTTP endpoint of a full chain dictionary to speed up processing
  dictionary: "https://gx.api.subquery.network/sq/subquery/bsc-dictionary"

dataSources:
  - kind: ethereum/Runtime # We use ethereum runtime since BSC is a layer-2 that is compatible
    startBlock: 28480050 # The block on which the Binance-Peg Ethereum token was deployed
    options:
      # Must be a key of assets
      abi: upgradeProfit
      address: "0x35249A85fADBC793cA89a486541881aB5911a4a3" # this is the contract address for Binance-Peg Ethereum Token https://bscscan.com/address/0x2170ed0880ac9a755fd29b2688956bd959f933f8
    assets:
      upgradeProfit:
        file: "./abis/upgradeProfit.json"
    mapping:
      file: "./dist/index.js"
      handlers:
        - handler: handleTransaction
          kind: ethereum/TransactionHandler # We use ethereum handlers since BSC is a layer-2 that is compatible
          filter:
            ## The function can either be the function fragment or signature
            # function: '0x095ea7b3'
            # function: '0x7ff36ab500000000000000000000000000000000000000000000000000000000'
            function: upgradeProfit(uint256 amount)
        - handler: handleWithdrawTransaction
          kind: ethereum/TransactionHandler # We use ethereum handlers since BSC is a layer-2 that is compatible
          filter:
            function: withdraw(uint256 _txId, address _account, uint256 _amount, uint256 _deadline, uint8 v, bytes32 r, bytes32 s)
        - handler: handleLog
          kind: ethereum/LogHandler # We use ethereum handlers since BSC is a layer-2 that is compatible
          filter:
            topics:
              ## Follows standard log filters https://docs.ethers.io/v5/concepts/events/
              - UpgradeProfitEvent(address indexed account, uint256 amount, uint256 fundAmount)
        - handler: handleWithdrawalEvent
          kind: ethereum/LogHandler # We use ethereum handlers since BSC is a layer-2 that is compatible
          filter:
            topics:
              - WithdrawalEvent(uint256 indexed txId, address indexed account, uint256 amount)
